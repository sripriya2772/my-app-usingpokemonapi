[{"/Users/abhi/Documents/my-pokemonapiapp/src/index.js":"1","/Users/abhi/Documents/my-pokemonapiapp/src/reportWebVitals.js":"2","/Users/abhi/Documents/my-pokemonapiapp/src/App.js":"3","/Users/abhi/Documents/my-pokemonapiapp/src/ListView.js":"4","/Users/abhi/Documents/my-pokemonapiapp/src/Header.js":"5"},{"size":535,"mtime":1659804566000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1659801441000,"results":"8","hashOfConfig":"7"},{"size":487,"mtime":1660124643992,"results":"9","hashOfConfig":"7"},{"size":7605,"mtime":1660125173881,"results":"10","hashOfConfig":"7"},{"size":681,"mtime":1660124678712,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"desij1",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/abhi/Documents/my-pokemonapiapp/src/index.js",[],[],"/Users/abhi/Documents/my-pokemonapiapp/src/reportWebVitals.js",[],[],"/Users/abhi/Documents/my-pokemonapiapp/src/App.js",[],[],"/Users/abhi/Documents/my-pokemonapiapp/src/ListView.js",["28"],[],"\nimport React, {useEffect, useState} from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport IconButton from '@mui/material/IconButton';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport Box from '@mui/material/Box';\nimport Collapse from '@mui/material/Collapse';\nimport Typography from '@mui/material/Typography';\nimport { styled } from '@mui/material/styles';\n\n\nconst LIST_END_POINT = 'https://pokeapi.co/api/v2/pokemon?limit=1000&offset=0';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n   \n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nconst ListView = () => {\n    const [rows, setRows] = useState([]);\n    const [status, setStatus] = React.useState({});\n\n    const getCharacterDetail = async (character, characterDetails) => {\n        await fetch(character.url)\n            .then(response => response.json())\n            .then(response => {\n                characterDetails.push(response)\n            })\n    }\n\n    const fetchData = async () => {\n        await fetch(LIST_END_POINT)\n            .then(response => response.json()) \n            .then(async response => {\n                    const characterDetails = [];\n                    if(response && response.results.length) {\n                        await Promise.all(response.results.map(async (character) => {\n                            await getCharacterDetail(character, characterDetails)\n                        }));\n                    }\n                    setRows(characterDetails);\n                }\n            )\n            .catch(err => console.error(err));\n    };\n\n    \n    useEffect(() => {\n        fetchData();\n        }, []);\n\n    const onCollapseChange = (rowId) => {\n        setStatus(prevState => ({\n                ...prevState,\n                [rowId]: !prevState[rowId]\n        }));\n    }\n    return (\n        <>\n            <TableContainer component={Paper}>\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell></TableCell>\n                            <TableCell>Avatar</TableCell>\n                            <TableCell align=\"left\">Name</TableCell>\n                            <TableCell align=\"left\">Height</TableCell>\n                            <TableCell align=\"left\">Weight</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map((row, index) => (\n                            <>\n                            <TableRow\n                                key={index}\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                            >\n                                <TableCell>\n                                    <IconButton\n                                        aria-label=\"expand row\"\n                                        size=\"small\"\n                                        onClick={() => onCollapseChange(row.name)}\n                                    >\n                                        {status[row.name] ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                                    </IconButton>\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    <img alt=\"avatar\" src={row.sprites.front_default}/>\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.name}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.height}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.weight}\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                                    <Collapse in={status[row.name]} timeout=\"auto\" unmountOnExit>\n                                        <Box sx={{ margin: 1 }}>\n                                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                                Abilities\n                                            </Typography>\n                                            <Table size=\"small\" aria-label=\"abilites\">\n                                                <TableBody>\n                                                    {row.abilities.map((abilityInfo, index) => (\n                                                        <StyledTableRow key={index}>\n                                                            <StyledTableCell component=\"th\" scope=\"row\">\n                                                                {abilityInfo.ability.name.toUpperCase()}\n                                                            </StyledTableCell>\n                                                        </StyledTableRow>\n                                                    ))}\n                                                </TableBody>\n                                            </Table>\n                                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                                Moves\n                                            </Typography>\n                                            <Table size=\"small\" aria-label=\"moves\">\n                                                <TableBody>\n                                                    {row.moves.map((moveInfo, index) => (\n                                                        <StyledTableRow key={index}>\n                                                            <StyledTableCell component=\"th\" scope=\"row\">\n                                                                {moveInfo.move.name.toUpperCase()}\n                                                            </StyledTableCell>\n                                                        </StyledTableRow>\n                                                    ))}\n                                                </TableBody>\n                                            </Table>\n\n                                        </Box>\n                                    </Collapse>\n                                </TableCell>\n                            </TableRow>\n                            </>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n}\n\nexport default ListView;\n","/Users/abhi/Documents/my-pokemonapiapp/src/Header.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":72,"column":12,"nodeType":"31","endLine":72,"endColumn":14,"suggestions":"32"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [fetchData]",{"range":"36","text":"37"},[2425,2427],"[fetchData]"]